package com.projectwork.impl;

import static net.sf.dynamicreports.report.builder.DynamicReports.stl;

import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import net.sf.dynamicreports.jasper.builder.JasperReportBuilder;
import net.sf.dynamicreports.report.builder.DynamicReports;
import net.sf.dynamicreports.report.builder.column.Columns;
import net.sf.dynamicreports.report.builder.component.Components;
import net.sf.dynamicreports.report.builder.datatype.DataTypes;
import net.sf.dynamicreports.report.builder.style.StyleBuilder;
import net.sf.dynamicreports.report.constant.HorizontalAlignment;
import net.sf.dynamicreports.report.exception.DRException;

import org.apache.commons.lang3.StringUtils;

import com.projectwork.bean.HistoricReportBean;
import com.projectwork.dto.HistoricReportDTO;
import com.projectwork.impl.sql.DataTableServiceSQLIfc;

public class HistoricReportServiceImpl extends DatabaseConnectionServiceImpl implements DataTableServiceSQLIfc
{
    public List<HistoricReportBean> getHistoricReportData(String feederName, List<String> selectedParametersList, String startDate, String endDate)
    {
        List<HistoricReportBean> historicalReportList = new ArrayList<HistoricReportBean>();
        List<String> selectedParameterIndexesList = new ArrayList<String>();
        List<Integer> selectedParameterIndexesIntegerList = new ArrayList<Integer>();
        HistoricReportBean bean = new HistoricReportBean();
        
        FeederServiceImpl feederServiceImplObj = new FeederServiceImpl();
        selectedParameterIndexesList = feederServiceImplObj.getParameterIndexesList(selectedParametersList);
        
        Integer meterVersion= 0;
        Integer meterVersionForFeeder= 0;
        Integer parameterIndex= 0;
        
        List<Integer> meterVersionsList = new ArrayList<Integer>();
        
        for(int i=0;i<selectedParameterIndexesList.size();i++)
        {
            System.out.println("Parameter Indexes are: "+selectedParameterIndexesList.get(i));
            
            selectedParameterIndexesIntegerList.add(Integer.parseInt(selectedParameterIndexesList.get(i)));
            
            parameterIndex = Integer.parseInt(selectedParameterIndexesList.get(i));
            
            bean = getHistoricReportDetails(feederName, parameterIndex, startDate, endDate);
            
            historicalReportList.add(bean);
            
            /*meterVersionsList = feederServiceImplObj.getMeterVersionFromIndex(parameterIndex);*/
        }
        
        return historicalReportList;
        
        /*meterVersionForFeeder = feederServiceImplObj.getMeterVersion(feederName);
        
        for(int i=0;i<meterVersionsList.size();i++)
        {
            meterVersion = meterVersionsList.get(i);

            if(meterVersion.equals(meterVersionForFeeder))
           {
                System.out.println("Match Found" + meterVersion);
                break;
           }
        }
*/        
    }
        
    public HistoricReportBean getHistoricReportDetails(String feederName, Integer parameterIndex, String startDate, String endDate)
    {
        
        PreparedStatement ps = null;
        ResultSet rs = null;
        short recordFound = 0;
        Connection con = null;
        Statement stmt = null;

        String sql = null;
        
        HistoricReportBean bean = new HistoricReportBean();
        
        try
        {
            con = getConnection();
            stmt = con.createStatement();

            /*sql = GET_HISTORIC_REPORT_DATA;*/
            sql = GET_HISTORIC_REPORT_PARAMETER_DATA;
            
            ps = con.prepareStatement(sql);

            ps.setString(1, startDate);
            ps.setString(2, endDate);
            ps.setString(3, feederName);
            ps.setInt(4, parameterIndex);

            rs = ps.executeQuery();

            while (rs.next())
            {
              bean.setValue(rs.getInt(DataTableServiceSQLIfc.DATA_TABLE_COLUMNS.VAL));
                bean.setDateTimeStamp(getJAVADate(rs.getTimestamp(DataTableServiceSQLIfc.DATA_TABLE_COLUMNS.DATE_TIME_STAMP)));
                bean.setFeederName(rs.getString(DataTableServiceSQLIfc.FEEDER_PROFILE_COLUMNS.FEEDER_NAME));
            }

            if (recordFound == 0)
            {
                System.out.println("No records found");
            }
        }

        catch (SQLException e)
        {
            System.out.println("Exception in closing DB resources");
            e.printStackTrace();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            try
            {
                rs.close();
                stmt.close();
                con.close();
            }
            catch (SQLException e)
            {
                System.out.println("Exception in closing DB resources");
            }
        }

        return bean;

    }
   
    public void exportHistoricalReport(List<HistoricReportDTO> historicalReportdtoList)
    {

        Connection con = null;
        
        try
        {
            con = getConnection();
        }
        catch (SQLException e1)
        {
            e1.printStackTrace();
        }
        
        JasperReportBuilder report = DynamicReports.report();
        
        StyleBuilder boldStyle         = stl.style().bold();
        StyleBuilder boldCenteredStyle = stl.style(boldStyle).setHorizontalAlignment(HorizontalAlignment.CENTER);

        StyleBuilder titleStyle  = stl.style(boldCenteredStyle)
                                                    .setBorder(stl.pen1Point())
                                                    .setBackgroundColor(Color.LIGHT_GRAY);
        
        report.columns(
                Columns.column("Date", "dateStamp", DataTypes.stringType()).setHorizontalAlignment(HorizontalAlignment.LEFT),
                Columns.column("Time", "timeStamp", DataTypes.stringType()),
                Columns.column("Feeder Name", "feederName", DataTypes.stringType()),
                Columns.column("Consumption Value", "consumptionValue", DataTypes.stringType())
                )
              .title(
                Components.text("Historical Report Results")
                    .setHorizontalAlignment(HorizontalAlignment.CENTER).setStyle(titleStyle))                    
              .pageFooter(Components.pageXofY())
              .setDataSource(historicalReportdtoList)
              ;

        try
        {
            report.toPdf(new FileOutputStream("c:\\histreport.pdf"));
        }
        catch (DRException e)
        {
            e.printStackTrace();
        }
        catch (FileNotFoundException e)
        {
            e.printStackTrace();
        }

      
    }
    

    public Calendar getJAVADate(Timestamp date)
    {
        Calendar cal = null;
        if (date != null)
        {
            cal = Calendar.getInstance();
            cal.setTimeInMillis(date.getTime());

        }
        return cal;
    }

}
