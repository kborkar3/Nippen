package com.projectwork.action.graph;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts2.interceptor.ServletRequestAware;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;

import com.opensymphony.xwork2.ActionSupport;
import com.projectwork.bean.DataTableBean;
import com.projectwork.bean.FeederBean;
import com.projectwork.constants.TestProjectConstantsIfc;
import com.projectwork.impl.GraphServiceImpl;
import com.projectwork.impl.LoginServiceImpl;

public class DisplayGraphAction extends ActionSupport implements TestProjectConstantsIfc, ServletRequestAware
{

    private HttpServletRequest request;
    
    private String feeder;
    private String startDate;
    private String endDate;
    
    private List<FeederBean> feederList = new ArrayList<FeederBean>();

    public String execute() throws Exception
    {
        int errorcount = 0;

        if (isEmpty(startDate))
        {
            addActionError(getText("error.startDate.required"));
            errorcount++;
        }

        if (isEmpty(endDate))
        {
            addActionError(getText("error.endDate.required"));
            errorcount++;
        }
        
        if(errorcount > 0)
        {
            feederList = new LoginServiceImpl().getFeederData();
            return RETURN_ERROR;
        }
        
        
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        formatter.setLenient(false);
        Date sdate = (Date)formatter.parse(startDate);
        Date edate = (Date)formatter.parse(endDate);
        startDate = formatter.format(sdate);
        endDate = formatter.format(edate);

        SimpleDateFormat newformatter = new SimpleDateFormat(DATE_FORMAT);
        newformatter.setLenient(false);
        startDate = newformatter.format(sdate);
        endDate = newformatter.format(edate);

        GraphServiceImpl graphServiceObject = new GraphServiceImpl();

        List<DataTableBean> graphParametersList = graphServiceObject.getGraphData(startDate, endDate);
        
        System.out.println("Size of graphParametersList is " + graphParametersList.size());
        
        List<String> datesInRangeList = getDaysBetweenDates(sdate, edate);
        
        System.out.println("All dates between date range : ");
        
        int datesInRangeListSize = datesInRangeList.size();
        
        for(int i=0;i<datesInRangeListSize;i++)
        {
            System.out.print(datesInRangeList.get(i)+"\t");
        }
        
        System.out.println("*****************************************");
        
        Collections.sort(graphParametersList, new Comparator<DataTableBean>() {
            public int compare(DataTableBean m1, DataTableBean m2) {
                return m1.getDateTimeStamp().compareTo(m2.getDateTimeStamp());
            }
        });
        
        
        for(int i=0;i<graphParametersList.size();i++)
        {
            if(!(datesInRangeList.contains(newformatter.format(toDate(graphParametersList.get(i).getDateTimeStamp())))))
            System.out.println("Common value is "+ newformatter.format(toDate(graphParametersList.get(i).getDateTimeStamp())));
        }
        
        
        String forwardString = RETURN_SUCCESS;
        String fullpath = request.getRealPath("") + "//" + "newLine.png";
        File file = new File(fullpath);
        FileOutputStream out = new FileOutputStream(file);

        try
        {
            ChartUtilities.writeChartAsPNG(out, generateLineChart(graphParametersList), 900, 400);
            out.flush();
            out.close();
        }
        catch (IOException ioEx)
        {
            System.err.println("Error writing PNG file ");
        }

        request.setAttribute("fullpath", fullpath);

        return RETURN_SUCCESS;
    }

    private static XYDataset createDataset()
    {
        TimeSeries series1 = new TimeSeries("Data");
        Date date = new Date();
        series1.add(new Day(date), 46.6);
        TimeSeriesCollection dataset = new TimeSeriesCollection();
        dataset.addSeries(series1);
        return dataset;
    }

    public static JFreeChart generateLineChart(List<DataTableBean> graphParametersList)
    {
        DefaultCategoryDataset dataSet = new DefaultCategoryDataset();

        SimpleDateFormat newformatter = new SimpleDateFormat(DATE_FORMAT);
        newformatter.setLenient(false);
        for (int i = 0; i < graphParametersList.size(); i++)
        {
            dataSet.setValue(graphParametersList.get(i).getValue(), "Reading",
                    newformatter.format(toDate(graphParametersList.get(i).getDateTimeStamp())));
        }

        JFreeChart chart = ChartFactory.createLineChart("Meter Reading", "Date", "Reading", dataSet,
                PlotOrientation.VERTICAL, false, true, false);

        return chart;
    }
    
    public static List<String> getDaysBetweenDates(Date sdate, Date edate)
    {
        List<String> dates = new ArrayList<String>();
        Calendar calendar = new GregorianCalendar();
        calendar.setTime(sdate);
        
       /* SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        formatter.setLenient(false);
        Date sdate = (Date)formatter.parse(startDate);
        startDate = formatter.format(sdate);*/

        SimpleDateFormat newformatter = new SimpleDateFormat(DATE_FORMAT);
        newformatter.setLenient(false);
        
        /*SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        formatter.setLenient(false);*/

        while (calendar.getTime().before(edate))
        {
            Date result = calendar.getTime();
            dates.add(newformatter.format(result));
            calendar.add(Calendar.DATE, 1);
        }
        return dates;
    }

    public static java.util.Date toDate(Calendar cal)
    {

        Timestamp timestamp = null;
        if (cal != null)
        {
            timestamp = new Timestamp(cal.getTimeInMillis());
        }

        long milliseconds = timestamp.getTime() + (timestamp.getNanos() / 1000000);
        return new java.util.Date(milliseconds);
    }
    

    protected boolean isEmpty(String value)
    {
        if (value == null || value.trim().equals(""))
        {
            return true;
        }
        return false;
    }

    public void setServletRequest(HttpServletRequest httpServletRequest)
    {
        this.request = httpServletRequest;
    }

    public String getFeeder()
    {
        return feeder;
    }

    public void setFeeder(String feeder)
    {
        this.feeder = feeder;
    }

    public String getStartDate()
    {
        return startDate;
    }

    public void setStartDate(String startDate)
    {
        this.startDate = startDate;
    }

    public String getEndDate()
    {
        return endDate;
    }

    public void setEndDate(String endDate)
    {
        this.endDate = endDate;
    }
    
    public List<FeederBean> getFeederList()
    {
        return feederList;
    }

    public void setFeederList(List<FeederBean> feederList)
    {
        this.feederList = feederList;
    }
    
    
    

}