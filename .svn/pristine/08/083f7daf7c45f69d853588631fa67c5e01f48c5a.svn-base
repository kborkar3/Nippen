package com.projectwork.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.iss.ketan.imp.WebImportSQLBuilder;
import com.projectwork.bean.FeederBean;
import com.projectwork.bean.ParameterBean;
import com.projectwork.impl.sql.EmployeeServiceSQLIfc;
import com.projectwork.impl.sql.FeederProfileServiceSQLIfc;
import com.projectwork.impl.sql.MeterParameterLinkServiceSQLIfc;
import com.projectwork.impl.sql.ParameterServiceSQLIfc;

public class LoginServiceImpl extends DatabaseConnectionServiceImpl implements FeederProfileServiceSQLIfc,
        EmployeeServiceSQLIfc, ParameterServiceSQLIfc, MeterParameterLinkServiceSQLIfc
{

    public boolean validateLoginCredentials(String loginid, String password)
    {
        PreparedStatement ps = null;
        ResultSet rs = null;
        Connection con = null;
        Statement stmt = null;
        String sql = null;

        boolean isUserPresent = false;

        String encryptedPassword = getDBLevelEncryptedString(password);

        try
        {
            con = getConnection();
            
            WebImportSQLBuilder s = new WebImportSQLBuilder("parameter");

            // s.addFieldData("test", "ketan");
            s.setSelectMode();
            
            //fireSelectSQL(s.getSQL(),s.getClass());
            
            stmt = con.createStatement();

            sql = VALIDATE_USER;
            ps = con.prepareStatement(sql);

            ps.setString(1, loginid);
            ps.setString(2, encryptedPassword);

            rs = ps.executeQuery();
            rs.next();
            int count = rs.getInt(1);

            if (count <= 0)
            {
                System.out.println("Failed to determine if user " + loginid + " exits.");
            }
            else
            {
                isUserPresent = true;
            }

        }

        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            System.out.println("Failed to determine if user " + loginid + " exits.");
            e.printStackTrace();
        }
        finally
        {
            try
            {
                rs.close();
                stmt.close();
                con.close();
            }
            catch (SQLException e)
            {
                System.out.println("Exception in closing DB resources");
            }
        }
        return isUserPresent;
    }

    public boolean isUserPresent(String loginid)
    {
        PreparedStatement ps = null;
        ResultSet rs = null;
        Connection con = null;
        Statement stmt = null;
        String sql = null;

        boolean isUserPresent = false;

        try
        {
            con = getConnection();
            stmt = con.createStatement();

            sql = CHECK_USER;
            ps = con.prepareStatement(sql);

            ps.setString(1, loginid);

            rs = ps.executeQuery();
            rs.next();
            int count = rs.getInt(1);

            if (count <= 0)
            {
                System.out.println("User " + loginid + " does not exist.");
            }
            else
            {
                isUserPresent = true;
            }

        }

        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            System.out.println("Failed to determine if user " + loginid + " exits.");
            e.printStackTrace();
        }
        finally
        {
            try
            {
                rs.close();
                stmt.close();
                con.close();
            }
            catch (SQLException e)
            {
                System.out.println("Exception in closing DB resources");
            }
        }
        return isUserPresent;

    }

    public List<FeederBean> getFeederData()
    {
        List<FeederBean> feederList = new ArrayList<FeederBean>();

        PreparedStatement ps = null;
        ResultSet rs = null;
        short recordFound = 0;
        Connection con = null;
        Statement stmt = null;

        String sql = null;
        try
        {
            con = getConnection();
            stmt = con.createStatement();
            
            sql = GET_FEEDER_DATA;
            ps = con.prepareStatement(sql);

            rs = ps.executeQuery();

            while (rs.next())
            {
                FeederBean bean = new FeederBean();
                bean.setFeeder(rs.getString(FeederProfileServiceSQLIfc.COLUMNS.FEEDER_NAME));
                feederList.add(bean);
                ++recordFound;
            }

            if (recordFound == 0)
            {
                throw new Exception("No Meters found");
            }
        }

        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            System.out.println("Exception in closing DB resources");
            e.printStackTrace();
        }
        finally
        {
            try
            {
                rs.close();
                stmt.close();
                con.close();
            }
            catch (SQLException e)
            {
                System.out.println("Exception in closing DB resources");
            }
        }

        return feederList;
    }

    public Integer getMeterVersion(String feederName)
    {
        PreparedStatement ps = null;
        ResultSet rs = null;
        short recordFound = 0;
        Connection con = null;
        Statement stmt = null;
        Integer meterIndex = 0;

        String sql = null;
        try
        {
            con = getConnection();
            stmt = con.createStatement();

            sql = GET_METER_VERSION;

            ps = con.prepareStatement(sql);
            ps.setString(1, feederName);

            rs = ps.executeQuery();

            while (rs.next())
            {
                meterIndex = rs.getInt(FeederProfileServiceSQLIfc.COLUMNS.METER_VERSION);
                ++recordFound;
            }

            if (recordFound == 0)
            {
                throw new Exception("No Meters found");
            }
        }

        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            System.out.println("Exception in closing DB resources");
            e.printStackTrace();
        }
        finally
        {
            try
            {
                rs.close();
                stmt.close();
                con.close();
            }
            catch (SQLException e)
            {
                System.out.println("Exception in closing DB resources");
            }
        }

        return meterIndex;

    }

    public List<ParameterBean> getParameterData(String feederName)
    {
        List<ParameterBean> parameterList = new ArrayList<ParameterBean>();
        List<Integer> meterParameterAssociateions = new ArrayList<Integer>();
        String parameterName = null;

        // Get Meter Version from FEEDER_PROFILE

        Integer meterVersion = getMeterVersion(feederName);

        // Get Parameter Index from METER_PARAMETER_LINK

        meterParameterAssociateions = getMeterParameterAssociateions(meterVersion);

        // Get Parameter Name from PARAMETER

        for (int i = 0; i < meterParameterAssociateions.size(); i++)
        {
            ParameterBean bean = new ParameterBean();
            parameterName = getParameterName(meterParameterAssociateions.get(i));
            bean.setParameterName(parameterName);
            parameterList.add(bean);
        }
        
        
        //  Call to FormatterMethods for testing
        
        int[] parameterValues = { 4,5,6,7 };
        
        return parameterList;
    }
    
    

    public String getParameterName(Integer parameterIndex)
    {
        PreparedStatement ps = null;
        ResultSet rs = null;
        short recordFound = 0;
        Connection con = null;
        Statement stmt = null;
        String sql = null;
        String parameterName = null;

        try
        {
            con = getConnection();
            stmt = con.createStatement();

            sql = GET_PARAMETER_NAME;
            ps = con.prepareStatement(sql);
            ps.setInt(1, parameterIndex);

            rs = ps.executeQuery();

            while (rs.next())
            {
                parameterName = rs.getString(ParameterServiceSQLIfc.COLUMNS.PARAMETER_NAME);
                ++recordFound;
            }

            if (recordFound == 0)
            {
                throw new Exception("No parameters found");
            }
        }

        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            System.out.println("Exception in closing DB resources");
            e.printStackTrace();
        }
        finally
        {
            try
            {
                rs.close();
                stmt.close();
                con.close();
            }
            catch (SQLException e)
            {
                System.out.println("Exception in closing DB resources");
            }
        }

        return parameterName;
    }
    
    
    public List<ParameterBean> getParameterDetails(Integer parameterIndex)
    {
        PreparedStatement ps = null;
        ResultSet rs = null;
        short recordFound = 0;
        Connection con = null;
        Statement stmt = null;
        String sql = null;
        
        List<ParameterBean> parameterDetailsList = new ArrayList<ParameterBean>();
       
        try
        {
            con = getConnection();
            stmt = con.createStatement();

            sql = GET_PARAMETER_DETAILS;
            ps = con.prepareStatement(sql);
            ps.setInt(1, parameterIndex);

            rs = ps.executeQuery();

            while (rs.next())
            {
                ParameterBean bean = new ParameterBean();
                
                bean.setParameterName(rs.getString(ParameterServiceSQLIfc.COLUMNS.PARAMETER_NAME));
                bean.setParameterRYGB(rs.getString(ParameterServiceSQLIfc.COLUMNS.PARAMETER_RYGB));
                bean.setParameterType(rs.getString(ParameterServiceSQLIfc.COLUMNS.PARAMETER_TYPE));
                bean.setParameterFormat(rs.getString(ParameterServiceSQLIfc.COLUMNS.PARAMETER_FORMAT));
                
                parameterDetailsList.add(bean);
                ++recordFound;
            }

            if (recordFound == 0)
            {
                throw new Exception("No parameters found");
            }
        }

        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            System.out.println("Exception in closing DB resources");
            e.printStackTrace();
        }
        finally
        {
            try
            {
                rs.close();
                stmt.close();
                con.close();
            }
            catch (SQLException e)
            {
                System.out.println("Exception in closing DB resources");
            }
        }

        return parameterDetailsList ;
    }
    

    private List<Integer> getMeterParameterAssociateions(Integer meterVersion)
    {
        PreparedStatement ps = null;
        ResultSet rs = null;
        Connection con = null;
        Statement stmt = null;
        String sql = null;
        int parameterIndex = 0;

        List<Integer> meterParameterAssociateions = new ArrayList<Integer>();

        try
        {
            con = getConnection();
            stmt = con.createStatement();

            sql = MeterParameterLinkServiceSQLIfc.GET_PARAMETER_INDEX;

            ps = con.prepareStatement(sql);
            ps.setInt(1, meterVersion);

            rs = ps.executeQuery();

            while (rs.next())
            {
                parameterIndex = rs.getInt(1);
                meterParameterAssociateions.add(parameterIndex);
            }

            if (meterParameterAssociateions.size() == 0)
            {
                throw new Exception("No Meters found");
            }
        }

        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            System.out.println("Exception in closing DB resources");
            e.printStackTrace();
        }
        finally
        {
            try
            {
                rs.close();
                stmt.close();
                con.close();
            }
            catch (SQLException e)
            {
                System.out.println("Exception in closing DB resources");
            }
        }

        return meterParameterAssociateions;
    }
    
    public int getCompanyID(String loginid)
    {
        PreparedStatement ps = null;
        ResultSet rs = null;
        Connection con = null;
        Statement stmt = null;
        String sql = null;

        int companyID = 0;

        try
        {
            con = getConnection();
            stmt = con.createStatement();

            sql = GET_COMPANY_ID;
            ps = con.prepareStatement(sql);

            ps.setString(1, loginid);

            rs = ps.executeQuery();

            while (rs.next())
            {
                companyID = rs.getInt(1);
            }
        }

        catch (SQLException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            System.out.println("Failed to get company id for user " + loginid);
            e.printStackTrace();
        }
        finally
        {
            try
            {
                rs.close();
                stmt.close();
                con.close();
            }
            catch (SQLException e)
            {
                System.out.println("Exception in closing DB resources");
            }
        }
        return companyID;

    }
    
    
    


    protected String getDBLevelEncryptedString(String plainString)
    {
        StringEncryptionUtility encryptionUtilObj = new StringEncryptionUtility();
        return encryptionUtilObj.getDBLevelEncodedString(plainString);
    }

}
